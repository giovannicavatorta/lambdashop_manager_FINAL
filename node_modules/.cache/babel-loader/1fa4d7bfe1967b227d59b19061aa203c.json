{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticatorService {\n  constructor() {\n    this.state = {\n      user: \"admin\",\n      psw: \"admin\"\n    };\n\n    this.setUserInformations = username => {\n      // Salvo nel session storage [Parametri: nome(str), params(funzione)]\n      sessionStorage.setItem(\"user\", username); // Richiamo l'interceptor per gli header di basicauth\n\n      this.setupAxiosInterceptors();\n    };\n\n    this.clearUserInformations = () => {\n      sessionStorage.removeItem(\"user\");\n    };\n\n    this.getUserInformations = () => {\n      return sessionStorage.getItem(\"user\");\n    };\n\n    this.isLoggedIn = () => {\n      let user = this.getUserInformations(); // Strict check\n\n      if (user === null) return false;else return true;\n    };\n  }\n\n  // Creo un metodo di axios (interceptor) che genera un \n  // BasicAuthHeader (come commentato \"old\" hard-coded nelle API).\n  // Lo richiamo nel momento stesso in cui vado a salvare le info dell'utente nel session storage,\n  // quindi in setUserInformations\n  setupAxiosInterceptors() {\n    let BasicAuthHeader = \"Basic \" + window.btoa(this.state.user + \":\" + this.state.psw);\n    axios.interceptors.request.use(config => {\n      // Verifico che l'utente si loggato per creare l'interceptor...\n      if (this.isLoggedIn()) {\n        config.headers.authorization = BasicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticatorService();","map":{"version":3,"names":["axios","AuthenticatorService","state","user","psw","setUserInformations","username","sessionStorage","setItem","setupAxiosInterceptors","clearUserInformations","removeItem","getUserInformations","getItem","isLoggedIn","BasicAuthHeader","window","btoa","interceptors","request","use","config","headers","authorization"],"sources":["/Users/cwgio97/Documents/React/lambdashop_manager/src/components/services/authservice.js"],"sourcesContent":["import axios from \"axios\";\n\nclass AuthenticatorService {\n\n    // Creo uno stet con user e psw hardcoded (per ora)\n    state = {\n        user: \"admin\",\n        psw: \"admin\"\n    }\n\n    // Metodo di salvataggio\n    setUserInformations = (username) => {\n        // Salvo nel session storage [Parametri: nome(str), params(funzione)]\n        sessionStorage.setItem(\"user\", username);\n\n        // Richiamo l'interceptor per gli header di basicauth\n        this.setupAxiosInterceptors();\n    }\n\n    // Metodo di rimozione info utente nella session\n    clearUserInformations = () => {\n        sessionStorage.removeItem(\"user\");\n    }\n\n    // Ottenere info utente\n    getUserInformations = () => {\n        return sessionStorage.getItem(\"user\");\n    }\n\n    // BOOL: controllo se l'utente Ã¨ loggato\n    isLoggedIn = () => {\n        let user = this.getUserInformations();\n        // Strict check\n        if (user === null) return false;\n        else return true;\n    }\n\n    // Creo un metodo di axios (interceptor) che genera un \n    // BasicAuthHeader (come commentato \"old\" hard-coded nelle API).\n    // Lo richiamo nel momento stesso in cui vado a salvare le info dell'utente nel session storage,\n    // quindi in setUserInformations\n    setupAxiosInterceptors() {\n        let BasicAuthHeader = \"Basic \" + window.btoa(this.state.user + \":\" + this.state.psw);\n        axios.interceptors.request.use(\n            (config) => {\n                // Verifico che l'utente si loggato per creare l'interceptor...\n                if (this.isLoggedIn()) {\n                    config.headers.authorization = BasicAuthHeader\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticatorService();"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,oBAAN,CAA2B;EAAA;IAAA,KAGvBC,KAHuB,GAGf;MACJC,IAAI,EAAE,OADF;MAEJC,GAAG,EAAE;IAFD,CAHe;;IAAA,KASvBC,mBATuB,GASAC,QAAD,IAAc;MAChC;MACAC,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BF,QAA/B,EAFgC,CAIhC;;MACA,KAAKG,sBAAL;IACH,CAfsB;;IAAA,KAkBvBC,qBAlBuB,GAkBC,MAAM;MAC1BH,cAAc,CAACI,UAAf,CAA0B,MAA1B;IACH,CApBsB;;IAAA,KAuBvBC,mBAvBuB,GAuBD,MAAM;MACxB,OAAOL,cAAc,CAACM,OAAf,CAAuB,MAAvB,CAAP;IACH,CAzBsB;;IAAA,KA4BvBC,UA5BuB,GA4BV,MAAM;MACf,IAAIX,IAAI,GAAG,KAAKS,mBAAL,EAAX,CADe,CAEf;;MACA,IAAIT,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP,CAAnB,KACK,OAAO,IAAP;IACR,CAjCsB;EAAA;;EAmCvB;EACA;EACA;EACA;EACAM,sBAAsB,GAAG;IACrB,IAAIM,eAAe,GAAG,WAAWC,MAAM,CAACC,IAAP,CAAY,KAAKf,KAAL,CAAWC,IAAX,GAAkB,GAAlB,GAAwB,KAAKD,KAAL,CAAWE,GAA/C,CAAjC;IACAJ,KAAK,CAACkB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;MACR;MACA,IAAI,KAAKP,UAAL,EAAJ,EAAuB;QACnBO,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BR,eAA/B;MACH;;MACD,OAAOM,MAAP;IACH,CAPL;EASH;;AAlDsB;;AAqD3B,eAAe,IAAIpB,oBAAJ,EAAf"},"metadata":{},"sourceType":"module"}