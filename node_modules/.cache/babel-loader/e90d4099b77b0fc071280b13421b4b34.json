{"ast":null,"code":"var _jsxFileName = \"/Users/cwgio97/Documents/React/lambdashop_manager/src/components/LambdaManager/Login/LoginComponent.jsx\";\nimport React, { Component } from \"react\";\nimport \"./LoginComponent.css\"; // Importo il servizio di auth\n\nimport AuthenticatorService from \"../../services/authservice.js\"; // Componente per il login\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class LoginComponent extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      userID: '',\n      password: '',\n      loggedIn: false,\n      notLogged: false\n    };\n\n    this.login = () => {\n      console.log(this.state.userID + ' ' + this.state.password); // Gestisco l'autenticazione\n\n      AuthenticatorService.authenticateUser(this.state.userID, this.state.password) // Se utente e psw sono corretti, allora\n      .then(() => {\n        AuthenticatorService.setUserInformations(this.state.userID, this.state.password);\n        this.props.history.push(\"/welcome\");\n      }) // Altrimenti faccio come prima e setto notLogged, loggedIn\n      .catch(() => {\n        this.setState({\n          loggedIn: false\n        });\n        this.setState({\n          notLogged: true\n        });\n      });\n      /*\n      if (this.state.userID === 'admin' && this.state.password === 'admin') {\n          // Passo le info all'auth\n          AuthenticatorService.setUserInformations(this.state.userID, this.state.password);\n          this.props.history.push(\"/welcome\");\n          // this.props.history.push(`/welcome/${this.state.userID}`);\n          \n          // this.setState({loggedIn: true});\n          // this.setState({notLogged: false});\n      }\n      else {\n          this.setState({loggedIn: false});\n          this.setState({notLogged: true});\n      }\n      */\n    };\n\n    this.gestMod = event => {\n      this.setState({\n        userID: '',\n        password: '',\n        loggedIn: false,\n        notLogged: false\n      });\n      this.setState({\n        // Modifico i valori nello state prendendo i 'name' dei textbox.\n        // Ovviamente la condizione è che il 'name' della textbox\n        // coincida con i nomi delle variabili nello state\n        [event.target.name]: event.target.value\n      });\n    };\n  }\n\n  // Inizializzo i textbox e il bottone 'Accedi'\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Ciao! Per accedere all'app di gestione del negozio, devi prima eseguire l'accesso.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Nome Utente: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"userID\",\n          value: this.state.userID,\n          onChange: this.gestMod\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Password: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: this.state.password,\n          onChange: this.gestMod\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: this.login,\n        children: \"Accedi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ConnectionWrongMessage, {\n        notLogged: this.state.notLogged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n} // Componente funzionale per segnalare un login errato\n\nfunction ConnectionWrongMessage(props) {\n  if (props.notLogged) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: \"Dati errati.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  } else return null;\n}\n\n_c = ConnectionWrongMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectionWrongMessage\");","map":{"version":3,"names":["React","Component","AuthenticatorService","LoginComponent","state","userID","password","loggedIn","notLogged","login","console","log","authenticateUser","then","setUserInformations","props","history","push","catch","setState","gestMod","event","target","name","value","render","ConnectionWrongMessage"],"sources":["/Users/cwgio97/Documents/React/lambdashop_manager/src/components/LambdaManager/Login/LoginComponent.jsx"],"sourcesContent":["import React, {Component} from \"react\";\nimport \"./LoginComponent.css\";\n// Importo il servizio di auth\nimport AuthenticatorService from \"../../services/authservice.js\";\n\n// Componente per il login\nexport default class LoginComponent extends Component {\n\n    state = {\n        userID: '',\n        password: '',\n        loggedIn: false,\n        notLogged: false\n    }\n\n    // Metodo login\n    login = () => {\n        console.log(this.state.userID + ' ' + this.state.password);\n\n        // Gestisco l'autenticazione\n        AuthenticatorService.authenticateUser(this.state.userID, this.state.password)\n        // Se utente e psw sono corretti, allora\n        .then(() => {\n            AuthenticatorService.setUserInformations(this.state.userID, this.state.password);\n            this.props.history.push(\"/welcome\");\n        })\n        // Altrimenti faccio come prima e setto notLogged, loggedIn\n        .catch(() => {\n            this.setState({loggedIn: false});\n            this.setState({notLogged: true});\n        })\n        /*\n        if (this.state.userID === 'admin' && this.state.password === 'admin') {\n            // Passo le info all'auth\n            AuthenticatorService.setUserInformations(this.state.userID, this.state.password);\n            this.props.history.push(\"/welcome\");\n            // this.props.history.push(`/welcome/${this.state.userID}`);\n            \n            // this.setState({loggedIn: true});\n            // this.setState({notLogged: false});\n        }\n        else {\n            this.setState({loggedIn: false});\n            this.setState({notLogged: true});\n        }\n        */\n    }\n\n    // Metodo per cambiare lo state in base a quanto scritto nelle textbox User e Password\n    gestMod = (event) => {\n        this.setState(\n            {\n                userID: '',\n                password: '',\n                loggedIn: false,\n                notLogged: false\n            }\n        )\n        this.setState(\n            {\n                // Modifico i valori nello state prendendo i 'name' dei textbox.\n                // Ovviamente la condizione è che il 'name' della textbox\n                // coincida con i nomi delle variabili nello state\n                [event.target.name]: event.target.value\n            }\n        )\n    }\n\n    // Inizializzo i textbox e il bottone 'Accedi'\n    render() {\n        return (\n            <div>\n                <p>Ciao! Per accedere all'app di gestione del negozio, devi prima eseguire l'accesso.</p>\n                <p>Nome Utente: <input type='text' name='userID' value={this.state.userID} onChange={this.gestMod}/></p>\n                <p>Password: <input type='password' name='password' value={this.state.password} onChange={this.gestMod}/></p>\n                <button type='button' className='btn btn-primary' onClick={this.login}>Accedi</button>\n                <ConnectionWrongMessage notLogged={this.state.notLogged}/>\n            </div>\n        )\n    }\n}\n\n// Componente funzionale per segnalare un login errato\nfunction ConnectionWrongMessage(props) {\n    if (props.notLogged) {\n        return (\n            <div className='alert alert-danger'>\n                Dati errati.\n            </div>\n        )\n    }\n\n    else return null;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}