{"ast":null,"code":"import axios from \"axios\";\n\nclass AuthenticatorService {\n  constructor() {\n    this.state = {\n      serverURL: \"http://localhost:5071/api\"\n    };\n\n    this.authenticateUser = (user, psw) => {\n      return axios.get(`${this.state.serverURL}/gifts/auth`, {\n        // Aggiungo nell'header le specifiche di autenticazione\n        // ottenute tramite la lambda preposta\n        headers: {\n          authorization: this.getBAuthHeader(user, psw)\n        }\n      });\n    };\n\n    this.setUserInformations = (user, psw) => {\n      // Salvo nel session storage [Parametri: nome(str), params(funzione)]\n      sessionStorage.setItem(\"user\", user); // Richiamo l'interceptor per gli header di basicauth\n\n      this.setupAxiosInterceptors(this.getBAuthHeader(user, psw));\n    };\n\n    this.clearUserInformations = () => {\n      sessionStorage.removeItem(\"user\");\n    };\n\n    this.getUserInformations = () => {\n      return sessionStorage.getItem(\"user\");\n    };\n\n    this.isLoggedIn = () => {\n      let user = this.getUserInformations(); // Strict check\n\n      if (user === null) return false;else return true;\n    };\n\n    this.getBAuthHeader = (user, psw) => {\n      \"Basic \" + window.btoa(user + \":\" + psw);\n    };\n  }\n\n  // Creo un metodo di axios (interceptor) che genera un \n  // BasicAuthHeader (come commentato \"old\" hard-coded nelle API).\n  // Lo richiamo nel momento stesso in cui vado a salvare le info dell'utente nel session storage,\n  // quindi in setUserInformations\n  setupAxiosInterceptors(BasicAuthHeader) {\n    axios.interceptors.request.use(config => {\n      // Verifico che l'utente si loggato per creare l'interceptor...\n      if (this.isLoggedIn()) {\n        config.headers.authorization = BasicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticatorService();","map":{"version":3,"names":["axios","AuthenticatorService","state","serverURL","authenticateUser","user","psw","get","headers","authorization","getBAuthHeader","setUserInformations","sessionStorage","setItem","setupAxiosInterceptors","clearUserInformations","removeItem","getUserInformations","getItem","isLoggedIn","window","btoa","BasicAuthHeader","interceptors","request","use","config"],"sources":["/Users/cwgio97/Documents/React/lambdashop_manager/src/components/services/authservice.js"],"sourcesContent":["import axios from \"axios\";\n\nclass AuthenticatorService {\n\n    // Creo uno state con user e psw hardcoded (temp per test))\n    /*\n    state = {\n        user: \"admin\",\n        psw: \"admin\"\n    }\n    */\n\n    // Gestisco l'autenticazione interfacciandomi con il backend\n    state = {\n        serverURL: \"http://localhost:5071/api\"\n    }\n\n    // Definisco una funzione che mi ritorni la stringa corretta per la BasicAuth,\n    // da inserire nell'header delle richieste\n    // setBAuthHeader = (user, psw) => \"Basic \" + window.btoa(user +  \":\" + psw)\n\n    // Ottengo la stringa OK da backend inserendo nell'header della richiesta i dati di login\n    authenticateUser = (user, psw) => {\n        return axios.get(`${this.state.serverURL}/gifts/auth`,\n        {\n            // Aggiungo nell'header le specifiche di autenticazione\n            // ottenute tramite la lambda preposta\n            headers: {authorization: this.getBAuthHeader(user, psw)}\n        });\n    }\n\n    // Metodo di salvataggio\n    setUserInformations = (user, psw) => {\n        // Salvo nel session storage [Parametri: nome(str), params(funzione)]\n        sessionStorage.setItem(\"user\", user);\n        // Richiamo l'interceptor per gli header di basicauth\n        this.setupAxiosInterceptors(this.getBAuthHeader(user, psw));\n    }\n\n    // Metodo di rimozione info utente nella session\n    clearUserInformations = () => {\n        sessionStorage.removeItem(\"user\");\n    }\n\n    // Ottenere info utente\n    getUserInformations = () => {\n        return sessionStorage.getItem(\"user\");\n    }\n\n    // BOOL: controllo se l'utente Ã¨ loggato\n    isLoggedIn = () => {\n        let user = this.getUserInformations();\n        // Strict check\n        if (user === null) return false;\n        else return true;\n    }\n\n    // Qui setto una lambda che mi restituisca l'header di auth corretto\n    getBAuthHeader = (user, psw) => {\n        \"Basic \" + window.btoa(user + \":\" + psw);\n    }\n\n    // Creo un metodo di axios (interceptor) che genera un \n    // BasicAuthHeader (come commentato \"old\" hard-coded nelle API).\n    // Lo richiamo nel momento stesso in cui vado a salvare le info dell'utente nel session storage,\n    // quindi in setUserInformations\n    setupAxiosInterceptors(BasicAuthHeader) {\n        axios.interceptors.request.use(\n            (config) => {\n                // Verifico che l'utente si loggato per creare l'interceptor...\n                if (this.isLoggedIn()) {\n                    config.headers.authorization = BasicAuthHeader\n                }\n                return config;\n            }\n        )\n    }\n}\n\nexport default new AuthenticatorService();"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,oBAAN,CAA2B;EAAA;IAAA,KAWvBC,KAXuB,GAWf;MACJC,SAAS,EAAE;IADP,CAXe;;IAAA,KAoBvBC,gBApBuB,GAoBJ,CAACC,IAAD,EAAOC,GAAP,KAAe;MAC9B,OAAON,KAAK,CAACO,GAAN,CAAW,GAAE,KAAKL,KAAL,CAAWC,SAAU,aAAlC,EACP;QACI;QACA;QACAK,OAAO,EAAE;UAACC,aAAa,EAAE,KAAKC,cAAL,CAAoBL,IAApB,EAA0BC,GAA1B;QAAhB;MAHb,CADO,CAAP;IAMH,CA3BsB;;IAAA,KA8BvBK,mBA9BuB,GA8BD,CAACN,IAAD,EAAOC,GAAP,KAAe;MACjC;MACAM,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BR,IAA/B,EAFiC,CAGjC;;MACA,KAAKS,sBAAL,CAA4B,KAAKJ,cAAL,CAAoBL,IAApB,EAA0BC,GAA1B,CAA5B;IACH,CAnCsB;;IAAA,KAsCvBS,qBAtCuB,GAsCC,MAAM;MAC1BH,cAAc,CAACI,UAAf,CAA0B,MAA1B;IACH,CAxCsB;;IAAA,KA2CvBC,mBA3CuB,GA2CD,MAAM;MACxB,OAAOL,cAAc,CAACM,OAAf,CAAuB,MAAvB,CAAP;IACH,CA7CsB;;IAAA,KAgDvBC,UAhDuB,GAgDV,MAAM;MACf,IAAId,IAAI,GAAG,KAAKY,mBAAL,EAAX,CADe,CAEf;;MACA,IAAIZ,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP,CAAnB,KACK,OAAO,IAAP;IACR,CArDsB;;IAAA,KAwDvBK,cAxDuB,GAwDN,CAACL,IAAD,EAAOC,GAAP,KAAe;MAC5B,WAAWc,MAAM,CAACC,IAAP,CAAYhB,IAAI,GAAG,GAAP,GAAaC,GAAzB,CAAX;IACH,CA1DsB;EAAA;;EA4DvB;EACA;EACA;EACA;EACAQ,sBAAsB,CAACQ,eAAD,EAAkB;IACpCtB,KAAK,CAACuB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;MACR;MACA,IAAI,KAAKP,UAAL,EAAJ,EAAuB;QACnBO,MAAM,CAAClB,OAAP,CAAeC,aAAf,GAA+Ba,eAA/B;MACH;;MACD,OAAOI,MAAP;IACH,CAPL;EASH;;AA1EsB;;AA6E3B,eAAe,IAAIzB,oBAAJ,EAAf"},"metadata":{},"sourceType":"module"}